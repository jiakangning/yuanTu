// 王鼎  3-15  18，25
<template>
  <run-work :options="options">
    <run-column
      position="form"
      after="authorize_state">
        <el-form-item label="功能命令">
            <run-work :options="options1"> </run-work>
        </el-form-item>
    </run-column>
  </run-work>
</template>

<script>
import Run from "run"
import Mock from "mockjs"

const state = [
  {
    label: "启用",
    value: "1"
  },
  {
    label: "禁用",
    value: "2"
  }
]
const account = [
  {
    label: "第一个上级",
    value: "11"
  },
  {
    label: "第二个上级",
    value: "222"
  }
]
const icon = [
  {
    label: "第一个图标",
    value: "1"
  },
  {
    label: "第二个图标",
    value: "2"
  }
]
export default {
  data() {
    return {
      dialogVisible: false,
      options: null,
      options1: null,
      sources: new Run.Source(),
      form: {
        name: "",
        identification: ""
      },
      tableData: []
    }
  },
  created() {
    this.options = new Run.Work({
      config: {
        title: "菜单管理"
      },
      actions: ["create", "update", "delete", "see"],
      list: {
        primaryField: "text",
        columns: [
          {
            label: "菜单名称",
            field: "text",
            layout: "text"
          },
          { label: "启动页面", field: "start_up", layout: "text" },
          { label: "是否激活", field: "sex", layout: "text" },
          { label: "图标", field: "icon", layout: "text" }
        ],
        layout: "treegrid"
      },
      form: {
        columns: [
          {
            label: "上级菜单",
            field: "parent_id",
            layout: "select",
            source: "account"
          },
          { label: "菜单名称", field: "text", layout: "text" },
          { label: "模块标识", field: "e_key", layout: "text" },
          {
            label: "模块图标",
            field: "icon",
            layout: "select",
            source: "icon"
          },
          { label: "启动页面", field: "start_up", layout: "text" },
          { label: "排序", field: "sl_index", layout: "text" },
          {
            label: "启用状态",
            field: "enable_state",
            layout: "radio",
            source: "state"
          },
          {
            label: "授权状态",
            field: "authorize_state",
            layout: "radio",
            source: "state"
          }
        ]
      },
      search: {
        layout: "multiple",
        columns: [{ label: "名称", field: "name", layout: "select" }]
      },
      events: {
        search(params) {
          console.log(params)
          setTimeout(() => {
            const { rows } = Mock.mock({
              "rows|10": [
                {
                  text: () => Mock.Random.cname(),
                  icon: () => Mock.Random.cname(),
                  sex: () => Mock.Random.boolean(),
                  "parent_id|1": ["男", "女"],
                  "id|+1": 1,
                  parentId() {
                    return this.id > 5 ? Mock.mock({ "id|1-5": 1 }).id : null
                  }
                }
              ],
              total() {
                return this.rows.lenngth
              }
            })
            this.sources.set("rows", rows)
          }, 1000)
        },
        delete(rows, done) {
          setTimeout(() => {
            done()
          }, 1000)
        },
        create: options => {
          console.log(options)
          let row = this.options.getList().row
          let form = this.options.getForm().row
          console.log(row)
          console.log(form)
        },
        submit(form, done) {
          console.log(form)
          setTimeout(() => {
            done()
          }, 1000)
        },
        edit(form) {}
      },
      sources: this.sources
    })
    this.searchDate()
    this.options1 = new Run.Work({
      actions: ["create", "update", "delete"],
      list: {
        pagination: false,
        columns: ["name1", "name2"]
      },
      form: ["name1", "name2"],
      columns: [
        { label: "名称", field: "name1", layout: "text" },
        { label: "标识", field: "name2", layout: "text" },
      ],
      events: {
        search(params) {
            console.log(params)
          setTimeout(() => {
            const { rows } = Mock.mock({
              "rows|4": [
                {
                  name1: () => Mock.Random.cname(),
                  name2: () => Mock.Random.cname(),

                }
              ],
              total() {
                return this.rows.lenngth
              }
            })
            this.sources.set("rows", rows)
          }, 1000)
        },
        delete(rows, done) {
          setTimeout(() => {
            done()
          }, 1000)
        },
        submit(form, done) {
          setTimeout(() => {
            done()
          }, 1000)
        },
        edit(form) {}
      }
    })
  },
  methods: {
    searchDate() {
      setTimeout(() => {
        this.sources.set("state", state)
        this.sources.set("icon", icon)
        this.sources.set("account", account)
      }, 3000)
    }
  }
}
</script>

<style scoped>
</style>
