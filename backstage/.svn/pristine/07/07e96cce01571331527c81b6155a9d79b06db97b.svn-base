/**
 * @author 甄岩岩
 * @date 2019-03-15
 */
const Op = require('sequelize').Op
const dbCtx = require('../../../database/dbCtx.js')
const { Command, Menu } = require('../../model/system/index.js')

class MenuManager {
  constructor (MenuRepo = Menu, CommandRepo = Command) {
    this.menuRepo = MenuRepo
    this.commandRepo = CommandRepo
    this.separator = '-'
  }

  /**
   * 创建菜单
   * @param {Object}  input
   * @param {Function} callback
   */
  create (input, callback) {
    if (!input) {
      callback(new Error('请传入参数'))
    } else {
      this.menuRepo.createMenuAndCommandCascade(input,
        { Menu: this.menuRepo, Command: this.commandRepo })
        .then((res) => callback(null, res))
        .catch(callback)
    }
  }

  /**
   * 修改菜单
   * @param {Object|Array<Object>}  input
   * @param {Function} callback
   */
  update (input, callback) {
    if (!input) {
      callback(new Error('请输入参数'))
    } else {
      this.menuRepo.updateMenuAndCommandCascade(input, {
        Menu: this.menuRepo,
        Command: this.commandRepo
      })
        .then(() => {callback(null, '修改成功')})
        .catch(callback)
    }
  }

  /**
   * 删除菜单
   * @param input {Array, Number}
   * @param callback
   */
  destroy (input, callback) {
    this.menuRepo.destroyMenuAndCommandCascade(input,
      { Menu: this.menuRepo, Command: this.commandRepo })
      .then(()=>{callback(null, '删除成功')})
      .catch(callback)
  }

  /**
   * 获取能构建成树形结构的数据
   * @param input
   * @param callback
   */
  findAll (input, callback) {
    const options = this.menuRepo.buildOptions(input)
    this.menuRepo.findAll(options)
      .then(instances => {
        const rows = instances.reduce((results, item) => {
          return results.concat(item.getParentIds())
        }, instances.map(v => v.id))
        const params = {
          where: { id: { [Op.in]: rows } },
          include: { model: this.commandRepo, required: false },
          distinct: true
        }
        return this.menuRepo.findAndCountAll(params)
      })
      .then(result => (callback(null, result)))
      .catch(callback)
  }

  composeMenuAndCmd (input, callback) {
    this.findAll(input, (err, datas) => {
      if (err) callback(err)
      else {
        try {
          let targetArr = []
          let { rows } = datas
          rows.forEach(v => {
            targetArr.push(Object.assign({}, { id: v.id.toString(), label: v.text, parentId: v.parentId ? v.parentId.toString() : null }))
            if (v.commands && v.commands.length) {
              v.commands.forEach(item => {
                targetArr.push(Object.assign({}, { id: v.id.toString() + this.separator + item.id.toString(), label: item.text, parentId: v.id.toString() }))
              })
            }
          })
          callback(null, targetArr)
        } catch (e) {
          callback(e)
        }
      }
    })
  }
}

module.exports = MenuManager
