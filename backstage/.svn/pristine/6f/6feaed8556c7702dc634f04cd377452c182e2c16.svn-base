/**
 * @author 甄岩岩
 * @created_at 2019/3/15
 */
const Sequelize = require('sequelize')
const dbCtx = require('../../../database/dbCtx')
const buildDefaultOption = require('../../util/buildDefaultOption.js')
const Op = require('sequelize').Op
const Connector = ','
const compareData = require('../../../app/util/compareData')

const Menu = dbCtx.define('menu', {
  id: { type: Sequelize.INTEGER, primaryKey: true, autoIncrement: true },
  authorId: { type: Sequelize.INTEGER, field: 'author_id' },
  editorId: { type: Sequelize.INTEGER, field: 'editor_id' },
  enableState: { type: Sequelize.INTEGER, field: 'enable_state' },
  authorizeState: { type: Sequelize.STRING(10), field: 'authorize_state' },
  eKey: { type: Sequelize.STRING(50), unique: true, allowNull: false, field: 'e_key' },
  text: { type: Sequelize.STRING(50), allowNull: false },
  icon: { type: Sequelize.STRING },
  startUp: { type: Sequelize.STRING, field: 'start_up' },
  description: { type: Sequelize.TEXT },
  parentId: { type: Sequelize.INTEGER, field: 'parent_id' },
  rtPath: { type: Sequelize.STRING(500), field: 'rt_path' },
  slIndex: { type: Sequelize.INTEGER, field: 'sl_index' }
}, {
  tableName: 'system_menu_info',
  underscored: true
})

Menu.beforeSave((instance) => {
  if (instance.changed('parentId') && instance.parentId) {
    return Menu
      .findByPk(instance.parentId)
      .then(res => {
        if (res.rtPath) {
          let parents = res.rtPath.split(Connector).concat(instance.parentId)
          instance.rtPath = parents.join(Connector)
        } else {
          instance.rtPath = instance.parentId
        }
        return instance
      })
  }
})
/**
 *
 * @param text
 * @param raw
 * @returns {{where: {}, order: Array}|result}
 */
Menu.buildOptions = function ({ text = '', ...raw }) {
  let result = buildDefaultOption(raw)
  text && (result.where.text = { [Op.like]: '%' + text + '%' })
  return result
}
/**
 *
 * @param id
 */
Menu.isExist = function (id) {
  return Menu.findByPk(id)
}
Menu.createMenuAndCommandCascade = function (input, { Menu, Command }) {
  return dbCtx.transaction(t => {
    return Menu
      .create(input, { include: [Command], transaction: t })
  })
}
/**
 * 级联更新menu和command表
 * @param id
 * @param commands
 * @param raw
 * @param Menu
 * @param Command
 * @returns {Promise}
 */
Menu.updateMenuAndCommandCascade = function ({ id, commands, ...raw }, { Menu, Command }) {
  return dbCtx.transaction(async (t) => {
    // 1.级联查询
    let condition = { where: { id }, include: [{ model: Command }], transaction: t }
    let menus = await Menu.findAll(condition)
    if (menus[0]) {
      let menu = menus[0]
      if (!menu.commands) {menu.commands = []}
      let { createArr, updateArr, destroyArr } = compareData(commands, menu.commands)
      let newMenu = await menu.update(raw, { transaction: t })
      if (createArr && createArr.length > 0) {
        createArr = Command.build(createArr).map(v => {
          return v.save({ transaction: t })
        })
        let addArr = await Promise.all(createArr)
        await newMenu.setCommands(addArr, { transaction: t })
      }
      if (updateArr && updateArr.length > 0) {
        updateArr = updateArr.map(v => {
          let { id, ...condition } = v
          return Command.update(condition, { where: { id }, transaction: t })
        })
        await Promise.all(updateArr)
      }
      if (destroyArr && destroyArr.length > 0) {
        let ids = destroyArr.map(v => v.id)
        await Command.destroy({ where: { id: { [Op.in]: ids } }, transaction: t })
      }
    } else {
      new Error('查无数据')
    }
  })
}

Menu.destroyMenuAndCommandCascade = function (input, { Menu, Command }) {
  const rows = Array.isArray(input) ? input : [input]
  const condition = { where: { id: { [Op.in]: rows } } }
  return dbCtx.transaction(t => {
    return Menu.findAll({
      ...condition,
      include: [{ model: Command }],
      transaction: t
    })
      .then(menus => {
        let cmdIds = menus.reduce(function (result, item) {
          let arr = []
          if (item.commands && item.commands.length > 0) {
            arr = (item.commands && item.commands.length > 0) ? item.commands.map(v => v.id) : []
          }
          result = result.concat(arr)
          return result
        }, [])
        if (cmdIds.length > 0) {
          return Command.destroy({ where: { id: { [Op.in]: cmdIds } }, transaction: t })
        } else {
          return Promise.resolve()
        }
      }).then(() => {
        return Menu.destroy({ ...condition, transaction: t })
      })
  })
}
Menu.prototype.getParentIds = function () {
  return this.rtPath ? this.rtPath.split(Connector) : []
}
module.exports = Menu
