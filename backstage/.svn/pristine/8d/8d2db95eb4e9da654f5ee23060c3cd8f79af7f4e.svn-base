import _ from 'lodash'
import Base from './Base'
import Config from './Config'

class ListConfig {

  static LAYOUT = {
    table: "table",
    treegrid: "treegrid"
  }

  static DEFAULT = {
    layout: "table",
    rows: "rows",
    total: "total",
    serial: true,
    selection: true,
    pagination: true,
    paginationOptions: {},
    primaryField: "name",
    primaryKey: "id",
    primaryCode: "id",
    referenceCode: "parentId",
    nodeOrder: "order",
    expandAll: false
  }

  constructor(options) {
    this.rawOption = Config.GetOptionsByStartKey(options, Config.RAWKEY.option)
    this.rawListener = Config.GetOptionsByStartKey(options, Config.RAWKEY.listener)
    this.layout = _.get(options, "layout", ListConfig.DEFAULT.layout)
    this.rows = _.get(options, "rows", ListConfig.DEFAULT.rows)

    switch (this.layout) {
      case ListConfig.LAYOUT.table:
        this.total = _.get(options, "total", ListConfig.DEFAULT.total)
        this.selection = _.get(options, "selection", ListConfig.DEFAULT.selection)
        this.serial = _.get(options, "serial", ListConfig.DEFAULT.serial)
        this.pagination = _.get(options, "pagination", ListConfig.DEFAULT.pagination)
        this.paginationOptions = _.get(options, "paginationOptions", ListConfig.DEFAULT.paginationOptions)
        break
      case ListConfig.LAYOUT.treegrid:
        this.primaryField = _.get(options, "primaryField", ListConfig.DEFAULT.primaryField)
        this.primaryKey = _.get(options, "primaryKey", ListConfig.DEFAULT.primaryKey)
        this.primaryCode = _.get(options, "primaryCode", ListConfig.DEFAULT.primaryCode)
        this.referenceCode = _.get(options, "referenceCode", ListConfig.DEFAULT.referenceCode)
        this.nodeOrder = _.get(options, "nodeOrder", ListConfig.DEFAULT.nodeOrder)
        this.expandAll = _.get(options, "expandAll", ListConfig.DEFAULT.expandAll)
        break
    }
  }

  get(field) {
    return field ? this[field] : this
  }
}

class ListColumn {

  static DEFAULT = {
    layout: "text"
  }

  constructor(options) {
    this.rawOption = Config.GetOptionsByStartKey(options, Config.RAWKEY.option)
    this.rawListener = Config.GetOptionsByStartKey(options, Config.RAWKEY.listener)
    this.layout = _.get(options, "layout", ListColumn.DEFAULT.layout)
    this.label = _.get(options, "label")
    this.field = _.get(options, "field")
    this.source = _.get(options, "source")
  }
}

class List extends Base {

  static EVENTS = {
    search: "search",
    currentChange: "currentChange",
    selectionChange: "selectionChange"
  }

  static Transform(options) {
    if (Array.isArray(options)) {
      return new List({ columns: options })
    } else {
      let { columns, ...config } = options
      return new List({ columns, config })
    }
  }

  constructor({ columns = [], events = {}, config = {}, sources = {} }) {
    super({ events, sources })
    this.initConfig(config)
    this.initColumns(columns)
  }

  initColumns(columns) {
    this.columns = columns.map(column => column instanceof ListColumn ? column : new ListColumn(column))
  }

  initConfig(config) {
    this.config = config instanceof ListConfig ? config : new ListConfig(config)
  }

  initContext(context) {
    this.context = context
  }

  getColumns() {
    return this.columns || []
  }

  getConfig(field) {
    return this.config.get(field)
  }

  getStateByRow(row) {
    if (!this.context) return null
    return this.context.getStateByRow(row)
  }

  getParams() {
    return this.params
  }

  setParams(params = {}) {
    this.params = params
  }
}

export default List