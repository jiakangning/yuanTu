import PopupSearch from "@/run/model/PopupSearch.js"
import Base from './Base'
import ChartWidge from './ChartWidge'
import ChartCard from './ChartCard'

class Chart extends Base {
  constructor({ columns = [], search, widge = {}, events = {}, sources = {} }) {
    super({ events, sources })
    this.initSearch(search)
    this.initWidge(widge)
    this.initColumns(columns)
  }

  initSearch(search) {
    const { columns, config } = this.transform(search)
    this.search = new PopupSearch({ columns, config, sources: this.sources, events: this.events })
  }

  initWidge(widge) {
    this.widge = new ChartWidge({ config: widge, sources: this.sources, events: this.events })
  }

  initColumns(columns) {
    this.columns = columns.map(column => {
      let instance = column instanceof ChartCard ? column : new ChartCard({ config: column })
      instance.initSources(this.sources)
      instance.initEvents(this.events)
      return instance
    })
  }

  getSearch() {
    return this.search
  }

  getWidge() {
    return this.widge
  }

  getColumns() {
    return this.columns || []
  }

  transform(options) {
    if (Array.isArray(options)) {
      return { columns: options, config: {} }
    } else {
      const { columns, ...config } = options
      return { columns, config }
    }
  }
}

export default Chart