<!-- create: 韩连杰
    data: 2019-03-15
    description: 职位管理
  -->
<!-- 修改: 赵赛赛
  data: 2019-03-16
  description: 对接增加查询接口
-->
<template>
  <run-work :options="options"/>
</template>

<script>
  import Run from 'run'
  import Mock from 'mockjs'
  import { system_job as JOB } from "@/store/action-types.js"

  export default {
    data() {
      return {
        options: null,
        sources: new Run.Source()
      }
    },
    mounted() {
      this.options = new Run.Work({
        config: {
          title: '职位管理'
        },
        actions: ['create', 'update', 'delete', 'see'],
        tabs: 'tabs',
        list: [
          'text',
          'mLevel',
          'pIndex',
          'remarks'
        ],
        form: [
          'text',
          'mLevel',
          'pIndex',
          'remarks'
        ],
        search: {
          layout: 'multiple',
          columns: [
            'mLevel',
            'text'
          ]
        },
        columns: [
          { label: '职位名称', field: 'text', layout: 'text', rules: true },
          { label: '职位说明', field: 'remarks', layout: 'textarea' },
          { label: '职级', field: 'mLevel', layout: 'select', source: 'level', rin_chargesules: true, rules: true },
          { label: '排序', field: 'pIndex', layout: 'number', rules: true }
        ],
        events: {
          search: (params) => {
            this.$store.dispatch(JOB.search, params).then(({ rows, total }) => {
              this.sources.set('rows', rows)
              this.sources.set('total', total)
            })
          },
          delete: (rows, done) => {
            this.$store.dispatch(JOB.delete, rows.map(v => v.id)).then(() => done()).catch(done)
          },
          submit: (form, done) => {
            const action = !form.id ? JOB.create : JOB.update
            this.$store.dispatch(action, form).then(() => done()).catch(done)
          }
        },
        sources: this.sources
      })
    },
    methods: {}
  }
</script>

<style scoped>
</style>
