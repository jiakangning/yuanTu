const path = require('path')
const express = require('express')
const bodyParser = require('body-parser')
const morgan = require('morgan')
const cors = require('cors')

const config = require('./config/config.loader').load()
const dbCtx = require('./database/dbCtx')

const authRoute = require('./app/router/auth')
// const { rps, sps } = require('./app/middleware/authenticate')
const failure = require('./app/middleware/failure')
const locationRoute = require('./app/router/location')

const app = express()

app.use(cors())
app.use(bodyParser.json())
app.use(bodyParser.urlencoded({ extended: false }))
app.use(express.static(path.join(__dirname, 'app', 'public')))
app.use(morgan(config.logger.mode))

app.use('/auth', authRoute)

// app.use(rps())

app.use('/location', locationRoute)

app.use(failure)

const server = app.listen(config.server.http.port, () => {
  console.log(`已正常开启Http服务，使用端口：${config.server.http.port}`)
  if (process.env.NODE_ENV === 'production') {
    dbCtx.authenticate()
      .then(() => {
        console.log('已正常连接数据库')
      })
      .catch(err => {
        console.log('无法连接数据库，故障描述：', err)
      })
  } else if (process.env.NODE_ENV === 'development') {
    dbCtx.sync()
      .then(_ => {
        console.log('已同步更新数据库结构')
      })
      .catch(err => {
        console.log('无法同步更新数据库结构，故障描述：', err)
      })
  }
})

require('./config/plugin.socket').init(server)
// io.use(sps())
require('./app/controller/location').pushAllStaffs({ interval: 5000 })
