<template>
  <run-work :options="workOptions">
    <run-column position="layer" title="角色授权" :option="{ area: ['50%', '300px'] }" v-model="showAuth">
      <run-form :options="authOptions"></run-form>
    </run-column>
    <run-column position="layer" title="移动端角色授权" :option="{ area: ['50%', '300px'] }" v-model="showMobileAuth">
      <run-form :options="authMobileOptions"></run-form>
    </run-column>
  </run-work>
</template>

<script>
import Run from 'run'
import Mock from 'mockjs'
import {
  system_role as ROLE,
  system_menu as MENU,
  system_menu as MOBILE_MENU
} from '@/store/action-types.js'

/**
 * @author: 魏婷
 * @date: 2019-03-19
 * @description: 人员管理
 */

// TODO: 测试查询角色列表接口
// TODO: 测试新增角色接口
// TODO: 测试修改角色接口
// TODO: 测试删除角色接口
// TODO: 测试设置角色下的权限接口
// TODO: 测试设置角色下的移动端权限接口

const menus = [
  {
    value: 'system',
    label: '系统管理',
    children: [
      {
        value: 'contact',
        label: '通讯录管理',
        children: [
          {
            value: 'create',
            label: '新增'
          }, {
            value: 'update',
            label: '修改'
          }, {
            value: 'delete',
            label: '删除'
          }
        ]
      },
      {
        value: 'member',
        label: '账户管理',
        children: [
          {
            value: 'create',
            label: '新增'
          }, {
            value: 'update',
            label: '修改'
          }, {
            value: 'delete',
            label: '删除'
          }
        ]
      }
    ]
  }
]

export default {
  name: 'role',
  data() {
    return {
      sources: new Run.Source(),
      workOptions: null,
      showAuth: false,
      showMobileAuth: false,
      authOptions: null,
      authMobileOptions: null,
      currentSelectedRoles: []
    }
  },
  created() {
    this.workOptions = new Run.Work({
      sources: this.sources,
      config: {
        title: '角色管理'
      },
      actions: [
        'create',
        'update',
        'delete',
        {
          text: '授权',
          icon: 'runicon iconunlock',
          click: ({ row, selection }) => {
            if (this.hasSelectRow(row, selection)) {
              this.showAuth = true
              this.$store.dispatch(MENU.search)
                .then(res => {
                  let obj = {
                    text: '测试人员',
                    functions: menus
                  }
                  this.sources.set('functions', menus)
                  this.authOptions.initForm(obj)
                })
            }

          }
        },
        {
          text: '移动端授权',
          icon: 'runicon iconmobile',
          click: ({ row, selection }) => {
            if (this.hasSelectRow(row, selection)) {
              this.showMobileAuth = true
              this.$store.dispatch(MOBILE_MENU.search)
                .then(res => {
                  let obj = {
                    text: '移动端权限',
                    functions: menus
                  }
                  this.sources.set('functions', menus)
                  this.authMobileOptions.initForm(obj)
                })
            }

          }
        },
      ],
      columns: [
        { label: '角色名称', field: 'text', layout: 'text' },
        { label: '角色说明', field: 'description', layout: 'text' },
        { label: '创建时间', field: 'created_at', layout: 'date' },
        { label: '排序', field: 'pIndex', layout: 'text' }
      ],
      list: ['text', 'description', 'created_at'],
      form: ['text', 'pIndex', 'description'],
      search: {
        layout: "multiple",
        columns: ['text']
      },
      events: {
        search: (params) => {
          this.$store.dispatch(ROLE.search, params)
            .then(res => {
              this.sources.set('rows', res.rows)
              this.sources.set('count', res.count)
            })
        },
        submit: (form, done) => {
          let action = form.id ? ROLE.update : ROLE.create
          this.$store.dispatch(action, form).then(() => done()).catch(done)
        },
        delete: (rows, done) => {
          this.$store.dispatch(ROLE.delete, rows).then(() => done()).catch(done)
        }
      }
    })

    this.authOptions = new Run.Form({
      sources: this.sources,
      columns: [
        { label: '角色名称', field: 'text', layout: 'text' },
        { label: '角色授权', field: 'functions', layout: 'treeselect', source: 'functions' }
      ],
      events: {
        submit: (form) => {
          console.log(form)
        },
        cancel: () => this.showAuth = false
      }
    })

    this.authMobileOptions = new Run.Form({
      sources: this.sources,
      columns: [
        { label: '角色名称', field: 'text', layout: 'text' },
        { label: '角色授权', field: 'functions', layout: 'treeselect', source: 'functions', _multiple: true }
      ],
      events: {
        submit: (form) => {
          console.log(form)
        },
        cancel: () => this.showMobileAuth = false
      }
    })
  },
  methods: {
    onSetAuth(done) {
      console.log('设置角色权限')
      done()
    },
    onSetMobileAuth(done) {
      console.log('设置移动端角色权限')
      done()
    },
    hasSelectRow(row, selection) {
      let count = Array.from(new Set(selection.concat(row ? [row] : []))).length
      if (count) {
        return true
      } else {
        this.$message.error('请至少选中一行数据！')
        return false
      }
    }
  }
}
</script>

