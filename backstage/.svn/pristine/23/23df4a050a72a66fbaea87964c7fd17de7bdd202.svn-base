/*
  creator: 贾康宁
  date: 2019-03-15
  description: 部门流程
*/
// const User = require('../../model/membership/User')
const dbCtx = require('../../../database/dbCtx')

class DepotManager {
  constructor (depotRepo) {
    this.depotRepo = depotRepo || require('../../model/system/DepotModel')
  }

  create (input, callback) {
    const { parentId, name, status, telphone, address, description, slIndex } = input
    let tempParentId = null
    if (parentId) tempParentId = parentId
    this.depotRepo.create(
      {
        sl_index: Number(slIndex),
        parent_id: tempParentId,
        name,
        status: Number(status),
        telphone,
        address,
        description
      }
    )
      .then(depot => {
        callback(null, depot)
      })
      .catch(err => {
        callback(err)
      })
  }

  findByPk (id, callback) {
    this.depotRepo.findByPk(id)
      .then(depot => {
        callback(null, depot.get({ plain: true }))
      })
      .catch(err => {
        callback(err, null)
      })
  }

  update (input, callback) {
    const { id, name, parentId, supervision, inCharges, status, telphone, address, description } = input
    if (id) {
      this.depotRepo.findByPk(id)
        .then(depot => {
          if (depot) {
            if (name) depot.name = name
            if (parentId) depot.parent_id = parentId
            if (supervision) depot.supervision = supervision
            if (inCharges) depot.in_charges = inCharges
            if (status) depot.status = status
            if (telphone) depot.telphone = telphone
            if (address) depot.address = address
            if (description) depot.address = description
            depot.save()
              .then(() => callback(null, depot))
              .catch(err => callback(err, null))
          } else {
            callback(new Error('部门不存在！'))
          }
        })
        .catch(err => callback(err))
    } else {
      callback(new Error('未传入id'), null)
    }
  }

  delete (id, callback) {
    if (id) {
      let _this = this
      return dbCtx.transaction(function (t) {
        return _this.depotRepo.findByPk(id, { transaction: t }).then(depot => {
          return depot.destroy({ transaction: t }).then(() => {
            return _this.depotRepo.destroy({
              where: {
                rt_path: {
                  $like: '%,' + id + ',%'
                }
              }
            }, { transaction: t }).then(effectRows => {
              callback(null, effectRows)
            })
          }).catch(err => {
            callback(err)
          })
        })
      })
    } else {
      callback(new Error('未找到相关部门'))
    }
  }

  showAllDepot (input, callback) {
    this.depotRepo.findAll().then(
      allDepot => {
        callback(null, allDepot)
      }
    ).catch(err => {
      callback(err, null)
    })
  }

  showDepotsByCcade (input, callback) {
    this.depotRepo.findParents(input).then(data => {
      callback(null, data)
    }).catch(err => {
      callback(err)
    })
  }
}

module.exports = DepotManager
